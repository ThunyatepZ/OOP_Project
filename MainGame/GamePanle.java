package MainGame;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JPanel;

import entity.Boss;
import entity.Bullet;
import entity.Enemy;
import entity.EnemyBullet;
import entity.Player;
import tile.Tilemanager;

public class GamePanle extends JPanel implements Runnable {
    // ---- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ----
    final int OriginalTitlesize = 16;
    final int scale = 3;
    public int titlesize = OriginalTitlesize * scale;
    public final int maxCol = 16;
    public final int maxRow = 12;
    public final int Widthscreen = titlesize * maxCol;
    public final int Hightscreen = titlesize * maxRow;

    // ‡πÇ‡∏•‡∏Å
    public final int maxWorldCol = 50;
    public final int maxWorldRow = 50;
    public final int WorldWidth = titlesize * maxWorldCol;
    public final int WorldHeight = titlesize * maxWorldRow;

    // ---- ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å ----
    KeyEventHandler keyH = new KeyEventHandler();
    final int FPS = 60;
    Thread gameThread;
    public boolean MenuOpen = false;
    public boolean gameOver = false;
    public int score = 0;

    // üÜï ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
    private boolean gameStarted = false;

    // ---- ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏• ----
    public int level = 1;

    // ---- ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° ----
    public int totalScore = 0; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

    // ---- ‡πÄ‡∏≠‡∏ô‡∏ó‡∏¥‡∏ï‡∏µ‡∏´‡∏•‡∏±‡∏Å ----
    public Player player1 = new Player(this, keyH);
    public ArrayList<Enemy> enemies = new ArrayList<>();
    public ArrayList<Boss> bosses = new ArrayList<>();
    public ArrayList<Bullet> bullets = new ArrayList<>();
    public ArrayList<EnemyBullet> enemyBullets = new ArrayList<>();

    public CollisionCheck collisionChecker = new CollisionCheck(this);
    public Tilemanager tileM = new Tilemanager(this);

    // ‡∏õ‡∏∏‡πà‡∏°
    private JButton restartBtn;
    private JButton nextLevelBtn;
    private JButton startBtn;

    // ‡∏™‡∏∏‡πà‡∏°
    private final java.util.Random rng = new java.util.Random();

    // ---------- ‡∏Ñ‡∏≠‡∏ô‡∏™‡∏ï‡∏£‡∏±‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå ----------
    public GamePanle() {
        setPreferredSize(new Dimension(Widthscreen, Hightscreen));
        setBackground(Color.black);
        setDoubleBuffered(true);
        addKeyListener(keyH);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        setLayout(null);

        // üÜï ‡∏õ‡∏∏‡πà‡∏° Start (‡πÇ‡∏ä‡∏ß‡πå‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Å‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
        startBtn = new JButton("Start");
        startBtn.setBounds(Widthscreen / 2 - 60, Hightscreen / 2 - 20, 120, 40);
        startBtn.setFocusable(false);
        startBtn.setVisible(true);
        startBtn.addActionListener(e -> {
            gameStarted = true;
            startBtn.setVisible(false);
            requestFocusInWindow();
            setupLevel(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
        });
        add(startBtn);

        // ‡∏õ‡∏∏‡πà‡∏° Restart
        restartBtn = new JButton("Restart");
        restartBtn.setBounds(Widthscreen / 2 - 60, Hightscreen / 2 + 50, 120, 40);
        restartBtn.setFocusable(false);
        restartBtn.setVisible(false);
        restartBtn.addActionListener(e -> {
            restartGame();
            requestFocusInWindow();
        });
        add(restartBtn);

        // ‡∏õ‡∏∏‡πà‡∏° Next Level
        nextLevelBtn = new JButton("Next Level");
        nextLevelBtn.setBounds(Widthscreen / 2 - 80, Hightscreen / 2 + 10, 160, 40);
        nextLevelBtn.setFocusable(false);
        nextLevelBtn.setVisible(false);
        nextLevelBtn.addActionListener(e -> {
            nextLevel();
            requestFocusInWindow();
        });
        add(nextLevelBtn);

        // ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setupLevel ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏î Start ‡∏Å‡πà‡∏≠‡∏ô
        // setupLevel();
    }

    // ---------- LOOP ----------
    public void startGameThread() {
        gameThread = new Thread(this);
        gameThread.start();
    }

    @Override
    public void run() {
        double drawInterval = 1_000_000_000.0 / FPS;
        double nextDrawTime = System.nanoTime() + drawInterval;

        while (gameThread != null) {
            update();
            repaint();

            try {
                double remainingTime = nextDrawTime - System.nanoTime();
                remainingTime /= 1_000_000.0;
                if (remainingTime < 0) remainingTime = 0;
                Thread.sleep((long) remainingTime);
                nextDrawTime += drawInterval;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // ---------- GAME LOGIC ----------
    public void update() {
        // üÜï ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° ‡∏Å‡∏î TAB ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∞‡πÑ‡∏£
        if (!gameStarted) return;

        if (keyH.tabPressed == 1) {
            MenuOpen = !MenuOpen;
            keyH.tabPressed = 0;
        }
        if (gameOver) return;

        if (!MenuOpen) {
            player1.update();

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            for (Enemy e : enemies) {
                if (e.alive) e.update();
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏≠‡∏™
            for (Boss b : bosses) {
                if (b.alive) b.update();
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            for (int i = bosses.size() - 1; i >= 0; i--) {
                Boss b = bosses.get(i);
                if (!b.alive) {
                    bosses.remove(i);
                    score += 1000;
                    totalScore += 1000;
                }
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            for (int i = enemies.size() - 1; i >= 0; i--) {
                Enemy e = enemies.get(i);
                if (!e.alive) {
                    enemies.remove(i);
                    score += 200;
                    totalScore += 200;
                }
            }

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏π‡∏Å‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô
            for (int i = 0; i < bullets.size(); i++) {
                Bullet b = bullets.get(i);
                b.update();
                if (!b.alive) { bullets.remove(i); i--; }
            }
            for (int i = 0; i < enemyBullets.size(); i++) {
                EnemyBullet eb = enemyBullets.get(i);
                eb.update();
                if (!eb.alive) { enemyBullets.remove(i); i--; }
            }

            // Game Over
            if (!player1.alive) {
                gameOver = true;
                nextLevelBtn.setVisible(false);
                restartBtn.setVisible(true);
            }

            // ‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô
            if (!gameOver && isLevelCleared()) {
                nextLevelBtn.setVisible(true);
            } else {
                nextLevelBtn.setVisible(false);
            }
        }
    }

    // ---------- LEVEL SYSTEM ----------
    private void setupLevel() {
        enemies.clear();
        enemyBullets.clear();
        bullets.clear();
        bosses.clear();

        int enemyCount = level * 3; // ‡∏î‡πà‡∏≤‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        for (int i = 0; i < enemyCount; i++) {
            spawnEnemyRandom();
        }

        // ‡∏ö‡∏≠‡∏™ 1 ‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡∏î‡πà‡∏≤‡∏ô
        spawnBossRandom();
    }

    private void nextLevel() {
        level++;
        setupLevel();
        nextLevelBtn.setVisible(false);
    }

    private boolean isLevelCleared() {
        for (Enemy e : enemies) if (e.alive) return false;
        for (Boss b : bosses) if (b.alive) return false;
        return true;
    }

    // ---------- ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏Å‡∏¥‡∏î‡∏®‡∏±‡∏ï‡∏£‡∏π ----------
    private void spawnEnemyRandom() {
        for (int tries = 0; tries < 40; tries++) {
            int col = rng.nextInt(maxWorldCol);
            int row = rng.nextInt(maxWorldRow);
            int tileId = tileM.mapTileNum[col][row];
            boolean walkable = (tileM.tile[tileId] != null && !tileM.tile[tileId].collision);
            if (!walkable) continue;

            int x = col * titlesize;
            int y = row * titlesize;

            int dx = x - player1.WorldX;
            int dy = y - player1.WorldY;
            int minDist = titlesize * 5;
            if (dx * dx + dy * dy < minDist * minDist) continue;

            enemies.add(new Enemy(this, x, y));
            return;
        }
    }

    private void spawnBossRandom() {
        for (int tries = 0; tries < 40; tries++) {
            int col = rng.nextInt(maxWorldCol);
            int row = rng.nextInt(maxWorldRow);

            int tileId = tileM.mapTileNum[col][row];
            boolean walkable = (tileM.tile[tileId] != null && !tileM.tile[tileId].collision);
            if (!walkable) continue;

            int x = col * titlesize;
            int y = row * titlesize;

            int dx = x - player1.WorldX;
            int dy = y - player1.WorldY;
            int minDist = titlesize * 6;
            if (dx * dx + dy * dy < minDist * minDist) continue;

            bosses.add(new Boss(this, x, y));
            return;
        }
        bosses.add(new Boss(this, Widthscreen / 2, Hightscreen / 2));
    }

    private void restartGame() {
        bullets.clear();
        enemyBullets.clear();
        enemies.clear();
        bosses.clear();

        MenuOpen = false;
        gameOver = false;
        level = 1;
        score = 0;
        totalScore = 0;

        restartBtn.setVisible(false);
        nextLevelBtn.setVisible(false);

        // ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏≠‡∏¢‡∏π‡πà
        gameStarted = true;

        player1 = new Player(this, keyH);
        setupLevel();
    }

    // ---------- RENDER ----------
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;

        // ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô
        tileM.draw(g2);

        // ‡∏ß‡∏≤‡∏î‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        for (Enemy e : enemies) if (e.alive) e.draw(g2);

        // ‡∏ß‡∏≤‡∏î‡∏ö‡∏≠‡∏™
        for (Boss b : bosses) if (b.alive) b.draw(g2);

        // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô
        for (Bullet b : bullets) b.draw(g2);
        for (EnemyBullet eb : enemyBullets) eb.draw(g2);

        // ‡∏ß‡∏≤‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
        player1.draw(g2);

        // UI ‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß
        if (gameStarted) {
            // ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
            g2.setColor(Color.red);
            int barW = 100, barH = 10;
            int curW = (int) ((player1.health / (double) player1.maxHealth) * barW);
            g2.fillRect(20, 20, curW, barH);
            g2.setColor(Color.white);
            g2.drawRect(20, 20, barW, barH);

            // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡πÄ‡∏•‡πÄ‡∏ß‡∏•
            g2.setColor(Color.WHITE);
            g2.drawString("Level: " + level, 20, 50);
            g2.drawString("Score: " + totalScore, 20, 70);
        }

        // Overlay: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
        if (!gameStarted) {
            g2.setColor(new Color(0, 0, 0, 160));
            g2.fillRect(0, 0, Widthscreen, Hightscreen);
            g2.setColor(Color.white);
            g2.setFont(g2.getFont().deriveFont(28f));
            String msg = "Click 'Start' to Play";
            java.awt.FontMetrics fm = g2.getFontMetrics();
            int msgX = (Widthscreen - fm.stringWidth(msg)) / 2;
            g2.drawString(msg, msgX, Hightscreen / 2 - 40);
        }

        // Game Over
        if (gameOver) {
            g2.setColor(new Color(0, 0, 0, 150));
            g2.fillRect(0, 0, Widthscreen, Hightscreen);
            g2.setColor(Color.white);
            g2.setFont(g2.getFont().deriveFont(36f));
            String msg = "GAME OVER";
            java.awt.FontMetrics fm = g2.getFontMetrics();
            int msgX = (Widthscreen - fm.stringWidth(msg)) / 2;
            g2.drawString(msg, msgX, Hightscreen / 2);
        }

        // ‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß)
        if (gameStarted && !gameOver && isLevelCleared()) {
            g2.setColor(new Color(0, 0, 0, 150));
            g2.fillRect(0, 0, Widthscreen, Hightscreen);
            g2.setColor(Color.white);
            g2.setFont(g2.getFont().deriveFont(28f));
            String msg = "Stage Cleared! Click 'Next Level'";
            java.awt.FontMetrics fm = g2.getFontMetrics();
            int msgX = (Widthscreen - fm.stringWidth(msg)) / 2;
            g2.drawString(msg, msgX, Hightscreen / 2);
        }
    }
}
